package com.kat.bookstore.services;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import javax.enterprise.context.ApplicationScoped;

import com.kat.bookstore.domain.*;

@ApplicationScoped
public class ClientDB {
	
	List<Integer> listID = new ArrayList<Integer>();

	private Connection connect;
	private Statement statement;
	private PreparedStatement addClientStmt;
	private PreparedStatement getClientStmt;
	private PreparedStatement deleteClientStmt;
	private PreparedStatement deleteAllClientsStmt;
	private PreparedStatement findClientStmt;

	public ClientDB() 
	{
		try 
		{
			Properties props = new Properties();
			
			try {
				props.load(ClassLoader.getSystemResourceAsStream("com/kat/bookstore/jdbs.properties"));
			} catch (IOException e) {
				e.printStackTrace();
			}
			
			
			connect = DriverManager.getConnection(props.getProperty("url"));

			statement = connect.createStatement();
			boolean ClientTableExists = false;

			ResultSet set = connect.getMetaData().getTables(null, null, null, null);

			while (set.next()) 
			{
				if ("Client".equalsIgnoreCase(set.getString("TABLE_NAME"))) 
				{
					ClientTableExists = true;
					break;
				}
			}

			if (!ClientTableExists) 
			{
				statement.executeUpdate("CREATE TABLE Client(id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,name varchar(20))");
			}

			addClientStmt = connect.prepareStatement("INSERT INTO Client (name, dateOfBirth) VALUES (?,?)");

			getClientStmt = connect.prepareStatement("SELECT * FROM Client");
			
			deleteAllClientsStmt = connect.prepareStatement("DELETE FROM Client");
			
			findClientStmt = connect.prepareStatement("SELECT id FROM Client WHERE name = ?");
			
			deleteClientStmt = connect.prepareStatement("DELETE FROM Client WHERE id = ?");

		} 
		catch (SQLException e) 
		{

			e.printStackTrace();
		}
	}

	public void addClient(Client c) 
	{
		try 
		{
			java.sql.Date dt = new java.sql.Date(c.getDateOfBirth().getTime());
			
			addClientStmt.setString(1, c.getName());
			addClientStmt.setDate(2, dt);
			addClientStmt.executeUpdate();
		} 
		catch (SQLException e) 
		{

			e.printStackTrace();
		}

	}

	public List<Client> getAllClients() 
	{
		List<Client> clientlist = new ArrayList<Client>();

		try 
		{
			ResultSet set = getClientStmt.executeQuery();

			while (set.next()) 
			{
				clientlist.add(new Client(set.getString("name"),set.getDate("dateOfBirth")));
			}

		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}

		return clientlist;
	}
	
	public void deleteAllClient() 
	{
		try 
		{
			deleteAllClientsStmt.executeUpdate();
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}
	
	public List<Integer> findClientByName(String name)
	{
		try 
		{
			List<Integer> result = new ArrayList<Integer>();
			findClientStmt.setString(1, name);
			ResultSet set = findClientStmt.executeQuery();
			while (set.next())
				result.add(set.getInt("ID"));
			return result;
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
		return null;
	}
	
	public void deleteClient(List<Integer> list)
	{
		try 
		{
			for (Integer id : list)
			{
				deleteClientStmt.setInt(1, id);
				deleteClientStmt.executeUpdate();
			}
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}


}
