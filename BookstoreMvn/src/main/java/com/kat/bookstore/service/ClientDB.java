package com.kat.bookstore.service;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;


import com.kat.bookstore.domain.*;

public class ClientDB {
	
	private Connection connect;
	private Statement statement;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";

	private String createTableClient = "CREATE TABLE Client(id bigint GENERATED BY DEFAULT AS IDENTITY(start with 1) PRIMARY KEY," +
										"name varchar(20), surname varchar(20))";
	private PreparedStatement addClientStmt;
	private PreparedStatement deleteAllClientsStmt;
	private PreparedStatement getAllClientsStmt;
	private PreparedStatement deleteClientStmt;
	private PreparedStatement findClientByNameStmt;
	private PreparedStatement findClientBySurnameStmt;
	List<Integer> listID = new ArrayList<Integer>();
	
	public ClientDB() {
		try 
		{
			
		connect = DriverManager.getConnection(url);
		statement = connect.createStatement();

		ResultSet set = connect.getMetaData().getTables(null, null, null, null);
		boolean tableExists = false;
		
		while (set.next()) {
			if ("Client".equalsIgnoreCase(set.getString("TABLE_NAME"))) {
				tableExists = true;
				break;
			} 
		}
	

		if (!tableExists) statement.executeUpdate(createTableClient);

		addClientStmt = connect.prepareStatement("INSERT INTO Client (name, surname) VALUES (?, ?)");
		deleteClientStmt = connect.prepareStatement("DELETE FROM Client WHERE id = ?");
		deleteAllClientsStmt = connect.prepareStatement("DELETE FROM Client");
		connect.prepareStatement("SELECT * FROM Client WHERE id = ?");
		getAllClientsStmt = connect.prepareStatement("SELECT * FROM Client");
		findClientByNameStmt = connect.prepareStatement("SELECT id FROM Client WHERE name = ?");
		findClientBySurnameStmt = connect.prepareStatement("SELECT id FROM Client WHERE surname = ?");
		
		} catch (SQLException e) {
		e.printStackTrace();
		}
	}


	Connection getConnection() {
		return connect;
	}


	public void addClient(Client c) {
		
		try {
			addClientStmt.setString(1, c.getName());
			addClientStmt.setString(2, c.getSurname());
			addClientStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}	
	
	public List<Client> getAllClients() {
		List<Client> clients = new ArrayList<Client>();

		try {
			ResultSet set = getAllClientsStmt.executeQuery();

			while (set.next()) {
				clients.add(new Client(set.getString("name"),set.getString("surname")));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return clients;
	}
	
	
	public void deleteClient(List<Integer> list)
	{
		try 
		{
			for (Integer id : list)
			{
				deleteClientStmt.setInt(1, id);
				deleteClientStmt.executeUpdate();
			}
		} 
		catch (SQLException e) 
		{
			e.printStackTrace();
		}
	}
	
	public void deleteAllClients() {
		try {
			deleteAllClientsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Integer> findClientByName(String name) {
		try {
			List<Integer> result = new ArrayList<Integer>();
			findClientByNameStmt.setString(1, name);
			ResultSet set = findClientByNameStmt.executeQuery();
			while (set.next())
				result.add(set.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public List<Integer> findClientBySurname(String surname) {
		try {
			List<Integer> result = new ArrayList<Integer>();
			findClientBySurnameStmt.setString(1, surname);
			ResultSet set = findClientBySurnameStmt.executeQuery();
			while (set.next())
				result.add(set.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
}

