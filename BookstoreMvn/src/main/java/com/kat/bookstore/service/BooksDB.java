package com.kat.bookstore.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import com.kat.bookstore.domain.*;

public class BooksDB {
	
	private Connection connect;
	private Statement statement;
	private String url = "jdbc:hsqldb:hsql://localhost/workdb";
	private String createTableBook = "CREATE TABLE Book(id bigint GENERATED BY DEFAULT AS IDENTITY(start with 1) PRIMARY KEY," +
										"title varchar(20), author varchar(20))";
	private PreparedStatement addBookStmt;
	private PreparedStatement deleteBookStmt;
	private PreparedStatement deleteAllBooksStmt;
	private PreparedStatement getAllBooksStmt;
	private PreparedStatement findBookByTitleStmt;
	private PreparedStatement findBookByAuthorStmt;
	List<Integer> IDList = new ArrayList<Integer>();
	
	
	public BooksDB() {
	try {
		connect = DriverManager.getConnection(url);
		statement = connect.createStatement();

		ResultSet set = connect.getMetaData().getTables(null, null, null, null);
		boolean tableExists = false;
		
		while (set.next()) {
			if ("Book".equalsIgnoreCase(set.getString("TABLE_NAME"))) {
				tableExists = true;
				break;
			} 
		}
	

		if (!tableExists) statement.executeUpdate(createTableBook);

		addBookStmt = connect.prepareStatement("INSERT INTO Book (title, author) VALUES (?, ?)");
		findBookByTitleStmt = connect.prepareStatement("SELECT id FROM Book WHERE title= ?");
		findBookByAuthorStmt = connect.prepareStatement("SELECT id FROM Book WHERE author= ?");
		deleteBookStmt = connect.prepareStatement("DELETE FROM Book WHERE id = ?");
		deleteAllBooksStmt = connect.prepareStatement("DELETE FROM Book");
		getAllBooksStmt = connect.prepareStatement("SELECT id, title, author FROM Book");
		connect.prepareStatement("SELECT id from Book");
	} catch (SQLException e) {
		e.printStackTrace();
		}
	}

	Connection getConnection() {
		return connect;
	}

	void clearAllBooks() {
		try {
			deleteAllBooksStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void addBook(Book b) {
		
		try {
			addBookStmt.setString(1, b.getTitle());
			addBookStmt.setString(2, b.getAuthor());
			addBookStmt.setString(3, b.getGenre().toString());
			addBookStmt.setInt(4, b.getYear());
			addBookStmt.setInt(5, b.getPrice());

			addBookStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	

	public List<Book> getAllBooks() {
		List<Book> booklist = new ArrayList<Book>();

		try {
			ResultSet set = getAllBooksStmt.executeQuery();

			while (set.next()) {
				BookGenre genre = null;
				if (set.getString("genre").equals("Horror")) genre= BookGenre.Horror;
				if (set.getString("genre").equals("Romance")) genre= BookGenre.Romance;
				if (set.getString("genre").equals("Fantasy")) genre= BookGenre.Fantasy;
				if (set.getString("genre").equals("Mistery")) genre= BookGenre.Mistery;
				if (set.getString("genre").equals("Drama")) genre= BookGenre.Drama;
				
				booklist.add(new Book(set.getString("title"),set.getString("author"),genre,set.getInt("year"),set.getInt("price")));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return booklist;
	}
	
	public void deleteAllBooks() {
		try {
			deleteAllBooksStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	
	public List<Integer> findBookByTitle(String title) {
		try {
			List<Integer> bookList = new ArrayList<Integer>();
			findBookByTitleStmt.setString(1, title);
			ResultSet set = findBookByTitleStmt.executeQuery();
			while (set.next())
				bookList.add(set.getInt("ID"));
			return bookList;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public List<Integer> findBookByAuthor(String author) {
		try {
			List<Integer> result = new ArrayList<Integer>();
			findBookByAuthorStmt.setString(1, author);
			ResultSet set = findBookByAuthorStmt.executeQuery();
			while (set.next())
				result.add(set.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public void deleteBook(List<Integer> bookList) {
		try {
			for (Integer id : bookList) {
				deleteBookStmt.setInt(1, id);
				deleteBookStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public void printBookWithCondition(List<Book> BookList, Condition condition) {
		for (Book book : BookList) {
			if (condition.getCondition(book)) {
				System.out.println("Title: " + book.getTitle() + "\nAuthor: "
						+ book.getAuthor());
			}
		}
	}
}
